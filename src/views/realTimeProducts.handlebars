<div>
    <h1>Lista de productos</h1>
    <ul class="list-group" id="product-list">
        {{#if products}}
            {{#each products}}
                <li class="list-group-item">
                    <h3>{{title}}</h3>
                    <img src='{{thumbnail}}' alt="{{thumbnail}}">
                    <p>Precio: {{price}}</p>
                    <p>Descripcion: {{description}}</p>
                    <p>Codigo: {{code}}</p>
                    <p>Stock: {{stock}}</p>
                    <p>Id: {{id}}</p>
                </li>
            {{/each}}
        {{else}}
            <p>No hay productos disponibles</p>
        {{/if}}
    </ul>
</div>

<form method="post" id="newProduct">
    <label for="realTimeTitle">Titulo: </label>
    <input type="text" name="title" id="realTimeTitle" >

    <label for="realTimeThumbnail" >Thumbnail URL:</label>
    <input type="text" name="thumbnail" id="realTimeThumbnail" >

    <label for="realTimePrice" >Precio:</label>
    <input type="number" name="price" id="realTimePrice" >

    <label for="realTimeDescription">Descripcion: </label>
    <input type="text" name="description" id="realTimeDescription" >

    <label for="realTimeCode">Codigo: </label>
    <input type="text" name="code" id="realTimeCode" >

    <label for="realTimeStock">Stock: </label>
    <input type="number" name="stock" id="realTimeStock" >

    <button id="realTimeButton"> Enviar </button>
</form>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socketClient = io();
    let products = []; // Define y maneja correctamente la variable products

    // Escuchar el evento 'newProduct' para recibir nuevos productos del servidor
    socketClient.on('newProduct', (newProduct) => {
        // Renderizar el nuevo producto en la lista
        renderNewProduct(newProduct);
    });

    // Función para renderizar un nuevo producto en la lista
    function renderNewProduct(product) {
        const productList = document.getElementById('product-list');
        const listItem = document.createElement('li');
        listItem.className = 'list-group-item';
        listItem.innerHTML = `
            <h3>${product.title}</h3>
            <img src='${product.thumbnail}' alt="${product.thumbnail}">
            <p>Precio: ${product.price}</p>
            <p>Descripcion: ${product.description}</p>
            <p>Codigo: ${product.code}</p>
            <p>Stock: ${product.stock}</p>
            <p>Id: ${product.id}</p>
        `;
        productList.appendChild(listItem);
    }

    // Obtener referencia al botón de enviar
    const button = document.getElementById('realTimeButton');

    // Agregar un listener al botón de enviar
    button.addEventListener('click', (e) => {
        e.preventDefault();

        // Obtener los valores de los campos del formulario
        const title = document.getElementById('realTimeTitle').value;
        const thumbnail = document.getElementById('realTimeThumbnail').value;
        const price = document.getElementById('realTimePrice').value;
        const description = document.getElementById('realTimeDescription').value;
        const code = document.getElementById('realTimeCode').value;
        const stock = document.getElementById('realTimeStock').value;

        // Verificar que todos los campos estén completos
        if (!title || !thumbnail || !price || !description || !code || !stock) {
            console.error('Todos los campos son obligatorios');
            return;
        }
        
        // Crear un objeto con la información del producto
        const product = {
            title,
            thumbnail,
            price,
            description,
            code,
            stock,
            
        };

        // Enviar el producto al servidor
        socketClient.emit('form_product', product);
    });
</script>
